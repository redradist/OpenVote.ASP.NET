@using Microsoft.Extensions.Logging
@using System.Security.Cryptography
@using System.Text;
@using OpenVote.Web.Client.Shared
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Core
@using OpenVote.Web.Client.Services

@inject HttpClient Http
@inject ILogger<App> Logger
@inject IWorkerFactory WorkerFactory

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Create worker.
        var worker = await WorkerFactory.CreateAsync();
        
        // Create service reference. For most scenarios, it's safe (and best) to keep this 
        // reference around somewhere to avoid the startup cost.
        var service = await worker.CreateBackgroundServiceAsync<CryptoService>();
        
        // Reference that live outside of the current scope should not be passed into the expression.
        // To circumvent this, create a scope-local variable like this, and pass the local variable.
        service.RunAsync(s => s.GenerateKey(2048));
        
        // RSAParameters? resRSAKeyInfo = await generateRSAKeyTask;
        //bool result = await Http.GetJsonAsync<bool>($"api/User/RegisterUser/{System.Text.Encoding.UTF8.GetString(resRSAKeyInfo.Exponent)}");
        //Logger.LogDebug($"result = {result}");
    }
}
